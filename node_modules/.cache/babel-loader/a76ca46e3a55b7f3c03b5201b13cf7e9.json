{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\ColdFusion2018\\\\cfusion\\\\wwwroot\\\\celerant360\\\\client\\\\src\\\\components\\\\Test.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Suspense, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport * as API from \"../API\";\nimport { useStateValue } from \"../StateProvider\";\nimport * as cC from \"./category/categoryController\";\nimport { useParams } from \"react-router\";\nlet texono = [];\nexport let taxonomy = [];\nexport let allProducts = [];\nconst resource = {\n  user: [{\n    name: \"a\"\n  }, {\n    name: \"b\"\n  }, {\n    name: \"c\"\n  }, {\n    name: \"d\"\n  }],\n  posts: [{\n    id: 1,\n    text: \"ss\"\n  }, {\n    id: 2,\n    text: \"nnn\"\n  }, {\n    id: 3,\n    text: \"ttt\"\n  }, {\n    id: 4,\n    text: \"uuu\"\n  }]\n};\nexport default function Test() {\n  _s();\n\n  let url = \"\";\n  const params = useParams();\n\n  if (params) {\n    url = params.url;\n  }\n\n  let urlData = cC.getUrlTaxonomy(url);\n  return /*#__PURE__*/_jsxDEV(ProfileTimeline, {\n    urlData: urlData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Test, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n\n_c = Test;\n\nfunction ProfileDetails() {\n  // Try to read user info, although it might not have loaded yet\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: resource.user.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = ProfileDetails;\n\nconst loadProducts = async (dispatch, category, setMyProducts) => {\n  let apiUrl = \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getAllProducts&property=sortby&caturl=firearms&taxonomy=DEPT&category=\" + category;\n  let data = [];\n  let response = await axios.get(apiUrl);\n  data = response.data;\n  console.log(data);\n\n  if (response.data.includes(\"table.cfdump_wddx\")) {\n    data = [];\n  }\n\n  console.log(data);\n  setMyProducts(data);\n};\n\nfunction ProfileTimeline(props) {\n  _s2();\n\n  const [{\n    allProductsData,\n    sFilters,\n    sortby\n  }, dispatch] = useStateValue();\n  let loading = false;\n  const [myProducts, setMyProducts] = useState([]);\n  loadProducts(dispatch, props.urlData.category, setMyProducts);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: loading == true ? \"Loading ---\" : myProducts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: post.STYLE_ID\n    }, post.STYLE_ID + \"werewr\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ProfileTimeline, \"4HbO32vBTu/HiHcqEpz9KDWFK1k=\", false, function () {\n  return [useStateValue];\n});\n\n_c3 = ProfileTimeline;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Test\");\n$RefreshReg$(_c2, \"ProfileDetails\");\n$RefreshReg$(_c3, \"ProfileTimeline\");","map":{"version":3,"sources":["C:/ColdFusion2018/cfusion/wwwroot/celerant360/client/src/components/Test.js"],"names":["React","Suspense","useState","useEffect","axios","reactLocalStorage","API","useStateValue","cC","useParams","texono","taxonomy","allProducts","resource","user","name","posts","id","text","Test","url","params","urlData","getUrlTaxonomy","ProfileDetails","loadProducts","dispatch","category","setMyProducts","apiUrl","data","response","get","console","log","includes","ProfileTimeline","props","allProductsData","sFilters","sortby","loading","myProducts","map","post","STYLE_ID"],"mappings":"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","sourcesContent":["import React, { Suspense, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport * as API from \"../API\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport * as cC from \"./category/categoryController\";\r\nimport { useParams } from \"react-router\";\r\n\r\nlet texono = [];\r\nexport let taxonomy = [];\r\nexport let allProducts = [];\r\n\r\nconst resource = {\r\n  user: [{ name: \"a\" }, { name: \"b\" }, { name: \"c\" }, { name: \"d\" }],\r\n  posts: [\r\n    { id: 1, text: \"ss\" },\r\n    { id: 2, text: \"nnn\" },\r\n    { id: 3, text: \"ttt\" },\r\n    { id: 4, text: \"uuu\" },\r\n  ],\r\n};\r\n\r\nexport default function Test() {\r\n  let url = \"\";\r\n  const params = useParams();\r\n  if (params) {\r\n    url = params.url;\r\n  }\r\n\r\n  let urlData = cC.getUrlTaxonomy(url);\r\n\r\n  return <ProfileTimeline urlData={urlData} />;\r\n}\r\n\r\nfunction ProfileDetails() {\r\n  // Try to read user info, although it might not have loaded yet\r\n  return <h1>{resource.user.name}</h1>;\r\n}\r\nconst loadProducts = async (dispatch, category, setMyProducts) => {\r\n  let apiUrl =\r\n    \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getAllProducts&property=sortby&caturl=firearms&taxonomy=DEPT&category=\" +\r\n    category;\r\n\r\n  let data = [];\r\n  let response = await axios.get(apiUrl);\r\n  data = response.data;\r\n  console.log(data);\r\n  if (response.data.includes(\"table.cfdump_wddx\")) {\r\n    data = [];\r\n  }\r\n  console.log(data);\r\n  setMyProducts(data);\r\n};\r\nfunction ProfileTimeline(props) {\r\n  const [{ allProductsData, sFilters, sortby }, dispatch] = useStateValue();\r\n  let loading = false;\r\n  const [myProducts, setMyProducts] = useState([]);\r\n  loadProducts(dispatch, props.urlData.category, setMyProducts);\r\n\r\n  return (\r\n    <ul>\r\n      {loading == true\r\n        ? \"Loading ---\"\r\n        : myProducts.map((post) => (\r\n            <li key={post.STYLE_ID + \"werewr\"}>{post.STYLE_ID}</li>\r\n          ))}\r\n    </ul>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}