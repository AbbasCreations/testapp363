{"ast":null,"code":"var _jsxFileName = \"C:\\\\ColdFusion2018\\\\cfusion\\\\wwwroot\\\\celerant360\\\\client\\\\src\\\\components\\\\Test.js\";\nimport React, { Suspense, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport * as API from \"../API\";\nimport { useStateValue } from \"../StateProvider\";\nimport * as cC from \"./category/categoryController\";\nimport { useParams } from \"react-router\";\nimport prodData from \"./prodData.json\";\nimport Autosuggest from \"react-autosuggest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  // Imagine you have a list of languages that you'd like to autosuggest.\n  const languages = [{\n    name: \"C\",\n    year: 1972\n  }, {\n    name: \"Elm\",\n    year: 2012\n  }]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\n  const getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n  }; // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n\n\n  const getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: suggestion.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 44\n  }, this);\n\n  class Example extends React.Component {\n    constructor() {\n      super(); // Autosuggest is a controlled component.\n      // This means that you need to provide an input value\n      // and an onChange handler that updates this value (see below).\n      // Suggestions also need to be provided to the Autosuggest,\n      // and they are initially empty because the Autosuggest is closed.\n\n      this.onChange = (event, {\n        newValue\n      }) => {\n        this.setState({\n          value: newValue\n        });\n      };\n\n      this.onSuggestionsFetchRequested = ({\n        value\n      }) => {\n        this.setState({\n          suggestions: getSuggestions(value)\n        });\n      };\n\n      this.onSuggestionsClearRequested = () => {\n        this.setState({\n          suggestions: []\n        });\n      };\n\n      this.state = {\n        value: \"\",\n        suggestions: []\n      };\n    }\n\n    render() {\n      const {\n        value,\n        suggestions\n      } = this.state; // Autosuggest will pass through all these props to the input.\n\n      const inputProps = {\n        placeholder: \"Type a programming language\",\n        value,\n        onChange: this.onChange\n      }; // Finally, render it!\n\n      return /*#__PURE__*/_jsxDEV(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this);\n    }\n\n  }\n\n  return \"\";\n}\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/ColdFusion2018/cfusion/wwwroot/celerant360/client/src/components/Test.js"],"names":["React","Suspense","useState","useEffect","axios","reactLocalStorage","API","useStateValue","cC","useParams","prodData","Autosuggest","Test","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","Example","Component","constructor","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, { Suspense, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport * as API from \"../API\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport * as cC from \"./category/categoryController\";\r\nimport { useParams } from \"react-router\";\r\nimport prodData from \"./prodData.json\";\r\nimport Autosuggest from \"react-autosuggest\";\r\n\r\nexport default function Test() {\r\n  // Imagine you have a list of languages that you'd like to autosuggest.\r\n  const languages = [\r\n    {\r\n      name: \"C\",\r\n      year: 1972,\r\n    },\r\n    {\r\n      name: \"Elm\",\r\n      year: 2012,\r\n    },\r\n  ];\r\n\r\n  // Teach Autosuggest how to calculate suggestions for any given input value.\r\n  const getSuggestions = (value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    const inputLength = inputValue.length;\r\n\r\n    return inputLength === 0\r\n      ? []\r\n      : languages.filter(\r\n          (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\r\n        );\r\n  };\r\n\r\n  // When suggestion is clicked, Autosuggest needs to populate the input\r\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n  // input value for every given suggestion.\r\n  const getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n  // Use your imagination to render suggestions.\r\n  const renderSuggestion = (suggestion) => <div>{suggestion.name}</div>;\r\n\r\n  class Example extends React.Component {\r\n    constructor() {\r\n      super();\r\n\r\n      // Autosuggest is a controlled component.\r\n      // This means that you need to provide an input value\r\n      // and an onChange handler that updates this value (see below).\r\n      // Suggestions also need to be provided to the Autosuggest,\r\n      // and they are initially empty because the Autosuggest is closed.\r\n      this.state = {\r\n        value: \"\",\r\n        suggestions: [],\r\n      };\r\n    }\r\n\r\n    onChange = (event, { newValue }) => {\r\n      this.setState({\r\n        value: newValue,\r\n      });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n    // You already implemented this logic above, so just use it.\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n      this.setState({\r\n        suggestions: getSuggestions(value),\r\n      });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to clear suggestions.\r\n    onSuggestionsClearRequested = () => {\r\n      this.setState({\r\n        suggestions: [],\r\n      });\r\n    };\r\n\r\n    render() {\r\n      const { value, suggestions } = this.state;\r\n\r\n      // Autosuggest will pass through all these props to the input.\r\n      const inputProps = {\r\n        placeholder: \"Type a programming language\",\r\n        value,\r\n        onChange: this.onChange,\r\n      };\r\n\r\n      // Finally, render it!\r\n      return (\r\n        <Autosuggest\r\n          suggestions={suggestions}\r\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n          getSuggestionValue={getSuggestionValue}\r\n          renderSuggestion={renderSuggestion}\r\n          inputProps={inputProps}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return \"\";\r\n}\r\n"]},"metadata":{},"sourceType":"module"}