{"ast":null,"code":"var _jsxFileName = \"C:\\\\ColdFusion2018\\\\cfusion\\\\wwwroot\\\\celerant360\\\\client\\\\src\\\\components\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { Suspense, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport * as API from \"../API\";\nimport { useStateValue } from \"../StateProvider\";\nimport * as cC from \"./category/categoryController\";\nimport { useParams } from \"react-router\";\nimport prodData from \"./prodData.json\";\nimport Autosuggest from \"react-autosuggest\"; // Imagine you have a list of languages that you'd like to autosuggest.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  name: \"C\",\n  year: 1972\n}, {\n  name: \"C++\",\n  year: 1973\n}, {\n  name: \"C sssss\",\n  year: 1974\n}, {\n  name: \"Elm\",\n  year: 2012\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: suggestion.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 42\n}, this);\n\nexport default function Test() {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const onChange = (event, {\n    newValue\n  }) => {\n    setValue(newValue);\n  }; // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  }; // Autosuggest will call this function every time you need to clear suggestions.\n\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  }; // Autosuggest will pass through all these props to the input.\n\n\n  const inputProps = {\n    placeholder: \"Type a programming language\",\n    id: \"abbas\",\n    value,\n    onChange: this.onChange\n  }; // Finally, render it!\n\n  return /*#__PURE__*/_jsxDEV(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Test, \"ckwyUyYkDHeO5Bvhh+ufzAXDSF4=\");\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/ColdFusion2018/cfusion/wwwroot/celerant360/client/src/components/Test.js"],"names":["React","Suspense","useState","useEffect","axios","reactLocalStorage","API","useStateValue","cC","useParams","prodData","Autosuggest","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","Test","setValue","suggestions","setSuggestions","onChange","event","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,+BAApB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CAEA;;;AACA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,IAAI,EAAE,GADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADgB,EAKhB;AACED,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALgB,EAShB;AACED,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CATgB,EAchB;AACED,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAdgB,CAAlB,C,CAoBA;;AACA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GACH,EADG,GAEHR,SAAS,CAACU,MAAV,CACGC,IAAD,IAAUA,IAAI,CAACV,IAAL,CAAUM,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UAD9D,CAFJ;AAKD,CATD,C,CAWA;AACA;AACA;;;AACA,MAAMQ,kBAAkB,GAAIC,UAAD,IAAgBA,UAAU,CAACb,IAAtD,C,CAEA;;;AACA,MAAMc,gBAAgB,GAAID,UAAD,iBAAgB;AAAA,YAAMA,UAAU,CAACb;AAAjB;AAAA;AAAA;AAAA;AAAA,QAAzC;;AAEA,eAAe,SAASe,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACZ,KAAD,EAAQa,QAAR,IAAoB3B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC4B,WAAD,EAAcC,cAAd,IAAgC7B,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAM8B,QAAQ,GAAG,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,KAAyB;AACxCL,IAAAA,QAAQ,CAACK,QAAD,CAAR;AACD,GAFD,CAJ6B,CAQ7B;AACA;;;AACA,QAAMC,2BAA2B,GAAG,CAAC;AAAEnB,IAAAA;AAAF,GAAD,KAAe;AACjDe,IAAAA,cAAc,CAAChB,cAAc,CAACC,KAAD,CAAf,CAAd;AACD,GAFD,CAV6B,CAc7B;;;AACA,QAAMoB,2BAA2B,GAAG,MAAM;AACxCL,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFD,CAf6B,CAmB7B;;;AACA,QAAMM,UAAU,GAAG;AACjBC,IAAAA,WAAW,EAAE,6BADI;AAEjBC,IAAAA,EAAE,EAAE,OAFa;AAIjBvB,IAAAA,KAJiB;AAKjBgB,IAAAA,QAAQ,EAAE,KAAKA;AALE,GAAnB,CApB6B,CA4B7B;;AACA,sBACE,QAAC,WAAD;AACE,IAAA,WAAW,EAAEF,WADf;AAEE,IAAA,2BAA2B,EAAE,KAAKK,2BAFpC;AAGE,IAAA,2BAA2B,EAAE,KAAKC,2BAHpC;AAIE,IAAA,kBAAkB,EAAEX,kBAJtB;AAKE,IAAA,gBAAgB,EAAEE,gBALpB;AAME,IAAA,UAAU,EAAEU;AANd;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAvCuBT,I;;KAAAA,I","sourcesContent":["import React, { Suspense, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport * as API from \"../API\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport * as cC from \"./category/categoryController\";\r\nimport { useParams } from \"react-router\";\r\nimport prodData from \"./prodData.json\";\r\nimport Autosuggest from \"react-autosuggest\";\r\n\r\n// Imagine you have a list of languages that you'd like to autosuggest.\r\nconst languages = [\r\n  {\r\n    name: \"C\",\r\n    year: 1972,\r\n  },\r\n  {\r\n    name: \"C++\",\r\n    year: 1973,\r\n  },\r\n  {\r\n    name: \"C sssss\",\r\n    year: 1974,\r\n  },\r\n\r\n  {\r\n    name: \"Elm\",\r\n    year: 2012,\r\n  },\r\n];\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = (value) => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : languages.filter(\r\n        (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\r\n      );\r\n};\r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\nconst getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = (suggestion) => <div>{suggestion.name}</div>;\r\n\r\nexport default function Test() {\r\n  const [value, setValue] = useState(\"\");\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  const onChange = (event, { newValue }) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    setSuggestions(getSuggestions(value));\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  const onSuggestionsClearRequested = () => {\r\n    setSuggestions([]);\r\n  };\r\n\r\n  // Autosuggest will pass through all these props to the input.\r\n  const inputProps = {\r\n    placeholder: \"Type a programming language\",\r\n    id: \"abbas\",\r\n\r\n    value,\r\n    onChange: this.onChange,\r\n  };\r\n\r\n  // Finally, render it!\r\n  return (\r\n    <Autosuggest\r\n      suggestions={suggestions}\r\n      onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n      onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n      getSuggestionValue={getSuggestionValue}\r\n      renderSuggestion={renderSuggestion}\r\n      inputProps={inputProps}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}