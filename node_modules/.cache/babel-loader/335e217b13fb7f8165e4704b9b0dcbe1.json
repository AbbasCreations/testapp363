{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\ColdFusion2018\\\\cfusion\\\\wwwroot\\\\celerant360\\\\client\\\\src\\\\components\\\\Category.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useStateValue } from \"../StateProvider\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as snV from \"./sideNav/sideNavViews\";\nimport * as cC from \"./category/categoryController\";\nimport * as cV from \"./category/categoryViews\";\nimport { useHistory } from \"react-router-dom\";\nimport { useParams } from \"react-router\";\nimport { GetMetaTags } from \"./Utilities\";\nimport * as API from \"../API\";\nimport axios from \"axios\";\nexport default function Category() {\n  _s();\n\n  let url = \"\";\n  const params = useParams();\n\n  if (params) {\n    url = params.url;\n  }\n\n  let urlData = cC.getUrlTaxonomy(url);\n  urlData.url = url;\n  let filters = {};\n  let history = useHistory();\n  const [{\n    allProductsData,\n    sFilters,\n    sortby\n  }, dispatch] = useStateValue();\n\n  if (Object.keys(sFilters).length != 0) {\n    reactLocalStorage.setObject(\"storedFilters\", sFilters);\n  }\n\n  filters = reactLocalStorage.getObject(\"storedFilters\");\n  filters[urlData.taxonomy] = urlData.category;\n  let temProducts = [];\n  let property = sortby;\n  let apiUrl = \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getAllProducts&property=\" + property + \"&caturl=\" + url + \"&taxonomy=\" + urlData.taxonomy + \"&category=\" + urlData.category;\n  useEffect(() => {\n    let data = [];\n\n    try {\n      axios.get(apiUrl).then(response => {\n        console.log(response.data);\n\n        if (!response.data.includes(\"table.cfdump_wddx\")) {\n          if (Object.entries(data).length > 0) {} else {\n            data = [];\n          }\n        } else {\n          data = [];\n        }\n\n        if (JSON.stringify(data) != JSON.stringify(allProductsData)) {\n          dispatch({\n            type: \"ALL_PRODUCTS\",\n            aProducts: [...data]\n          });\n        }\n      });\n    } catch (error) {}\n  }, [allProductsData]);\n  /*\r\n  API.ApiProducts(\r\n    allProductsData,\r\n    dispatch,\r\n    property,\r\n    url,\r\n    urlData.taxonomy,\r\n    urlData.category\r\n  );\r\n  */\n\n  temProducts = cC.getProducts(filters, allProductsData, dispatch, property, url, urlData.taxonomy, urlData.category);\n  console.log(\"here\");\n  console.log(temProducts);\n  let props = {\n    filters: {}\n  };\n  props.filters = filters;\n  let categoryTile = cC.getCategoryTitle(props); // will update data later when connected to DB\n\n  let metas = {\n    title: categoryTile,\n    description: categoryTile,\n    keywords: categoryTile,\n    image: \"\",\n    url: window.location.href,\n    imageSrc: \"\"\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"contentHolder\",\n      children: [/*#__PURE__*/_jsxDEV(GetMetaTags, { ...metas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"category\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(BreadCrumbDisplay, {\n              filters: filters,\n              dispatch: dispatch,\n              history: history,\n              urlData: urlData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SideBarDisplay, {\n              filters: filters,\n              products: temProducts,\n              url: url\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CategoryProductArea, {\n              dispatch: dispatch,\n              filters: filters,\n              products: temProducts,\n              property: property\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Category, \"VwOpHp2u7/EjZi4SQtFJ1onxeCg=\", false, function () {\n  return [useParams, useHistory, useStateValue];\n});\n\n_c = Category;\n\nconst BreadCrumbDisplay = props => {\n  let breadcrumbs = cC.getCategoryBreadCrumbs(props);\n  return cV.BreadCrumbDisplay(breadcrumbs);\n};\n\n_c2 = BreadCrumbDisplay;\n\nconst SideBarDisplay = props => {\n  let sideNavContent = snV.SideBarViews(props);\n  return sideNavContent;\n};\n\n_c3 = SideBarDisplay;\n\nconst CategoryProductArea = props => {\n  _s2();\n\n  let products = [];\n  products = props.products; //HOOK FOR PERPAGE PRODUCTS\n\n  const [perpageProductscount, setPerpageProductscount] = useState(9); //HOOK FOR ACTIVE PAGE\n\n  const [activePage, setCurrentPage] = useState(1); //GET CATEGORY TITLE\n\n  let categoryTile = cC.getCategoryTitle(props); //PRODUCTS PER PAGE\n\n  let productsPerPage = perpageProductscount; //GET PRODUCTS ACCORDING TO PAGINATION\n\n  let currentproducts = cC.pagination(products, productsPerPage, activePage).currentproducts;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [cV.categotyProductsView(categoryTile, currentproducts, products, cC, setPerpageProductscount, props.dispatch, props.property), cV.paginationView(activePage, productsPerPage, products, cC, setCurrentPage)]\n  }, void 0, true);\n};\n\n_s2(CategoryProductArea, \"w25bwHYyxDK/plZHTS2DEhTR5tI=\");\n\n_c4 = CategoryProductArea;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Category\");\n$RefreshReg$(_c2, \"BreadCrumbDisplay\");\n$RefreshReg$(_c3, \"SideBarDisplay\");\n$RefreshReg$(_c4, \"CategoryProductArea\");","map":{"version":3,"sources":["C:/ColdFusion2018/cfusion/wwwroot/celerant360/client/src/components/Category.js"],"names":["React","useState","useEffect","useStateValue","reactLocalStorage","snV","cC","cV","useHistory","useParams","GetMetaTags","API","axios","Category","url","params","urlData","getUrlTaxonomy","filters","history","allProductsData","sFilters","sortby","dispatch","Object","keys","length","setObject","getObject","taxonomy","category","temProducts","property","apiUrl","data","get","then","response","console","log","includes","entries","JSON","stringify","type","aProducts","error","getProducts","props","categoryTile","getCategoryTitle","metas","title","description","keywords","image","window","location","href","imageSrc","BreadCrumbDisplay","breadcrumbs","getCategoryBreadCrumbs","SideBarDisplay","sideNavContent","SideBarViews","CategoryProductArea","products","perpageProductscount","setPerpageProductscount","activePage","setCurrentPage","productsPerPage","currentproducts","pagination","categotyProductsView","paginationView"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport * as snV from \"./sideNav/sideNavViews\";\r\nimport * as cC from \"./category/categoryController\";\r\nimport * as cV from \"./category/categoryViews\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useParams } from \"react-router\";\r\nimport { GetMetaTags } from \"./Utilities\";\r\nimport * as API from \"../API\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Category() {\r\n  let url = \"\";\r\n  const params = useParams();\r\n  if (params) {\r\n    url = params.url;\r\n  }\r\n\r\n  let urlData = cC.getUrlTaxonomy(url);\r\n\r\n  urlData.url = url;\r\n  let filters = {};\r\n  let history = useHistory();\r\n  const [{ allProductsData, sFilters, sortby }, dispatch] = useStateValue();\r\n\r\n  if (Object.keys(sFilters).length != 0) {\r\n    reactLocalStorage.setObject(\"storedFilters\", sFilters);\r\n  }\r\n\r\n  filters = reactLocalStorage.getObject(\"storedFilters\");\r\n  filters[urlData.taxonomy] = urlData.category;\r\n  let temProducts = [];\r\n  let property = sortby;\r\n\r\n  let apiUrl =\r\n    \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getAllProducts&property=\" +\r\n    property +\r\n    \"&caturl=\" +\r\n    url +\r\n    \"&taxonomy=\" +\r\n    urlData.taxonomy +\r\n    \"&category=\" +\r\n    urlData.category;\r\n\r\n  useEffect(() => {\r\n    let data = [];\r\n\r\n    try {\r\n      axios.get(apiUrl).then((response) => {\r\n        console.log(response.data);\r\n        if (!response.data.includes(\"table.cfdump_wddx\")) {\r\n          if (Object.entries(data).length > 0) {\r\n          } else {\r\n            data = [];\r\n          }\r\n        } else {\r\n          data = [];\r\n        }\r\n\r\n        if (JSON.stringify(data) != JSON.stringify(allProductsData)) {\r\n          dispatch({\r\n            type: \"ALL_PRODUCTS\",\r\n            aProducts: [...data],\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {}\r\n  }, [allProductsData]);\r\n\r\n  /*\r\n  API.ApiProducts(\r\n    allProductsData,\r\n    dispatch,\r\n    property,\r\n    url,\r\n    urlData.taxonomy,\r\n    urlData.category\r\n  );\r\n  */\r\n\r\n  temProducts = cC.getProducts(\r\n    filters,\r\n    allProductsData,\r\n    dispatch,\r\n    property,\r\n    url,\r\n    urlData.taxonomy,\r\n    urlData.category\r\n  );\r\n  console.log(\"here\");\r\n  console.log(temProducts);\r\n\r\n  let props = { filters: {} };\r\n  props.filters = filters;\r\n  let categoryTile = cC.getCategoryTitle(props);\r\n\r\n  // will update data later when connected to DB\r\n  let metas = {\r\n    title: categoryTile,\r\n    description: categoryTile,\r\n    keywords: categoryTile,\r\n    image: \"\",\r\n    url: window.location.href,\r\n    imageSrc: \"\",\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <section id=\"contentHolder\">\r\n        <GetMetaTags {...metas} />\r\n\r\n        <div id=\"category\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <BreadCrumbDisplay\r\n                filters={filters}\r\n                dispatch={dispatch}\r\n                history={history}\r\n                urlData={urlData}\r\n              />\r\n              {\r\n                <SideBarDisplay\r\n                  filters={filters}\r\n                  products={temProducts}\r\n                  url={url}\r\n                />\r\n              }\r\n              <CategoryProductArea\r\n                dispatch={dispatch}\r\n                filters={filters}\r\n                products={temProducts}\r\n                property={property}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n}\r\nconst BreadCrumbDisplay = (props) => {\r\n  let breadcrumbs = cC.getCategoryBreadCrumbs(props);\r\n  return cV.BreadCrumbDisplay(breadcrumbs);\r\n};\r\nconst SideBarDisplay = (props) => {\r\n  let sideNavContent = snV.SideBarViews(props);\r\n  return sideNavContent;\r\n};\r\nconst CategoryProductArea = (props) => {\r\n  let products = [];\r\n  products = props.products;\r\n  //HOOK FOR PERPAGE PRODUCTS\r\n  const [perpageProductscount, setPerpageProductscount] = useState(9);\r\n\r\n  //HOOK FOR ACTIVE PAGE\r\n  const [activePage, setCurrentPage] = useState(1);\r\n\r\n  //GET CATEGORY TITLE\r\n  let categoryTile = cC.getCategoryTitle(props);\r\n\r\n  //PRODUCTS PER PAGE\r\n  let productsPerPage = perpageProductscount;\r\n\r\n  //GET PRODUCTS ACCORDING TO PAGINATION\r\n  let currentproducts = cC.pagination(products, productsPerPage, activePage)\r\n    .currentproducts;\r\n\r\n  return (\r\n    <>\r\n      {cV.categotyProductsView(\r\n        categoryTile,\r\n        currentproducts,\r\n        products,\r\n        cC,\r\n        setPerpageProductscount,\r\n        props.dispatch,\r\n        props.property\r\n      )}\r\n      {cV.paginationView(\r\n        activePage,\r\n        productsPerPage,\r\n        products,\r\n        cC,\r\n        setCurrentPage\r\n      )}\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}