{"ast":null,"code":"var _jsxFileName = \"C:\\\\ColdFusion2018\\\\cfusion\\\\wwwroot\\\\celerant360\\\\client\\\\src\\\\components\\\\Test.js\";\nimport React, { Suspense, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nimport * as API from \"../API\";\nimport { useStateValue } from \"../StateProvider\";\nimport * as cC from \"./category/categoryController\";\nimport { useParams } from \"react-router\";\nimport prodData from \"./prodData.json\";\nimport Autosuggest from \"react-autosuggest\"; // Imagine you have a list of languages that you'd like to autosuggest.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  name: \"C\",\n  year: 1972\n}, {\n  name: \"C++\",\n  year: 1973\n}, {\n  name: \"C sssss\",\n  year: 1974\n}, {\n  name: \"Elm\",\n  year: 2012\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: suggestion.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 42\n}, this);\n\nexport default class Test extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: \"\",\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: \"Type a programming language\",\n      id: \"myid\",\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/ColdFusion2018/cfusion/wwwroot/celerant360/client/src/components/Test.js"],"names":["React","Suspense","useState","useEffect","axios","reactLocalStorage","API","useStateValue","cC","useParams","prodData","Autosuggest","languages","name","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","Test","Component","constructor","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder","id"],"mappings":"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","sourcesContent":["import React, { Suspense, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\nimport * as API from \"../API\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport * as cC from \"./category/categoryController\";\r\nimport { useParams } from \"react-router\";\r\nimport prodData from \"./prodData.json\";\r\nimport Autosuggest from \"react-autosuggest\";\r\n\r\n// Imagine you have a list of languages that you'd like to autosuggest.\r\nconst languages = [\r\n  {\r\n    name: \"C\",\r\n    year: 1972,\r\n  },\r\n  {\r\n    name: \"C++\",\r\n    year: 1973,\r\n  },\r\n  {\r\n    name: \"C sssss\",\r\n    year: 1974,\r\n  },\r\n\r\n  {\r\n    name: \"Elm\",\r\n    year: 2012,\r\n  },\r\n];\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = (value) => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : languages.filter(\r\n        (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\r\n      );\r\n};\r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\nconst getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = (suggestion) => <div>{suggestion.name}</div>;\r\n\r\nexport default class Test extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // Autosuggest is a controlled component.\r\n    // This means that you need to provide an input value\r\n    // and an onChange handler that updates this value (see below).\r\n    // Suggestions also need to be provided to the Autosuggest,\r\n    // and they are initially empty because the Autosuggest is closed.\r\n    this.state = {\r\n      value: \"\",\r\n      suggestions: [],\r\n    };\r\n  }\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue,\r\n    });\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: getSuggestions(value),\r\n    });\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: [],\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n\r\n    // Autosuggest will pass through all these props to the input.\r\n    const inputProps = {\r\n      placeholder: \"Type a programming language\",\r\n      id: \"myid\",\r\n      value,\r\n      onChange: this.onChange,\r\n    };\r\n\r\n    // Finally, render it!\r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}