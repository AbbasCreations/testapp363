{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport { useStateValue } from \"./StateProvider\";\nimport axios from \"axios\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\nexport const GetTaxonomyfromAPI = async () => {\n  let url = \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getTaxonomy\";\n\n  try {\n    const response = await axios.get(url);\n\n    if (!response.data.includes(\"table.cfdump_wddx\")) {\n      let data = response.data;\n      reactLocalStorage.setObject(\"allTaxonomy\", data);\n    }\n  } catch (error) {}\n};\n_c = GetTaxonomyfromAPI;\nexport const ApiProducts = async (allProductsData, dispatch, property, catUrl, taxonomy, category) => {\n  let url = \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getAllProducts&property=\" + property + \"&caturl=\" + catUrl + \"&taxonomy=\" + taxonomy + \"&category=\" + category;\n\n  try {\n    let data = [];\n    const response = await axios.get(url);\n\n    if (response.data.includes(\"table.cfdump_wddx\")) {\n      data = [];\n    } else {\n      data = response.data;\n\n      if (Object.entries(data).length > 0) {} else {\n        data = [];\n      }\n    }\n  } catch (error) {\n    data = [];\n  }\n\n  console.log(\"wooooo dataaaaa\");\n  return \"\";\n};\n_c2 = ApiProducts;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetTaxonomyfromAPI\");\n$RefreshReg$(_c2, \"ApiProducts\");","map":{"version":3,"sources":["C:/ColdFusion2018/cfusion/wwwroot/celerant360/client/src/API.js"],"names":["React","useState","useEffect","useStateValue","axios","reactLocalStorage","GetTaxonomyfromAPI","url","response","get","data","includes","setObject","error","ApiProducts","allProductsData","dispatch","property","catUrl","taxonomy","category","Object","entries","length","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,OAAO,MAAMC,kBAAkB,GAAG,YAAY;AAC5C,MAAIC,GAAG,GACL,wEADF;;AAGA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAUF,GAAV,CAAvB;;AACA,QAAI,CAACC,QAAQ,CAACE,IAAT,CAAcC,QAAd,CAAuB,mBAAvB,CAAL,EAAkD;AAChD,UAAID,IAAI,GAAGF,QAAQ,CAACE,IAApB;AACAL,MAAAA,iBAAiB,CAACO,SAAlB,CAA4B,aAA5B,EAA2CF,IAA3C;AACD;AACF,GAND,CAME,OAAOG,KAAP,EAAc,CAAE;AACnB,CAXM;KAAMP,kB;AAab,OAAO,MAAMQ,WAAW,GAAG,OACzBC,eADyB,EAEzBC,QAFyB,EAGzBC,QAHyB,EAIzBC,MAJyB,EAKzBC,QALyB,EAMzBC,QANyB,KAOtB;AACH,MAAIb,GAAG,GACL,wFACAU,QADA,GAEA,UAFA,GAGAC,MAHA,GAIA,YAJA,GAKAC,QALA,GAMA,YANA,GAOAC,QARF;;AAUA,MAAI;AACF,QAAIV,IAAI,GAAG,EAAX;AACA,UAAMF,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAUF,GAAV,CAAvB;;AAEA,QAAIC,QAAQ,CAACE,IAAT,CAAcC,QAAd,CAAuB,mBAAvB,CAAJ,EAAiD;AAC/CD,MAAAA,IAAI,GAAG,EAAP;AACD,KAFD,MAEO;AACLA,MAAAA,IAAI,GAAGF,QAAQ,CAACE,IAAhB;;AACA,UAAIW,MAAM,CAACC,OAAP,CAAeZ,IAAf,EAAqBa,MAArB,GAA8B,CAAlC,EAAqC,CACpC,CADD,MACO;AACLb,QAAAA,IAAI,GAAG,EAAP;AACD;AACF;AACF,GAbD,CAaE,OAAOG,KAAP,EAAc;AACdH,IAAAA,IAAI,GAAG,EAAP;AACD;;AACDc,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,SAAO,EAAP;AACD,CApCM;MAAMX,W","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nimport axios from \"axios\";\r\nimport { reactLocalStorage } from \"reactjs-localstorage\";\r\n\r\nexport const GetTaxonomyfromAPI = async () => {\r\n  let url =\r\n    \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getTaxonomy\";\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    if (!response.data.includes(\"table.cfdump_wddx\")) {\r\n      let data = response.data;\r\n      reactLocalStorage.setObject(\"allTaxonomy\", data);\r\n    }\r\n  } catch (error) {}\r\n};\r\n\r\nexport const ApiProducts = async (\r\n  allProductsData,\r\n  dispatch,\r\n  property,\r\n  catUrl,\r\n  taxonomy,\r\n  category\r\n) => {\r\n  let url =\r\n    \"http://localhost:8500/celerant360/server/CF/API.cfc?method=getAllProducts&property=\" +\r\n    property +\r\n    \"&caturl=\" +\r\n    catUrl +\r\n    \"&taxonomy=\" +\r\n    taxonomy +\r\n    \"&category=\" +\r\n    category;\r\n\r\n  try {\r\n    let data = [];\r\n    const response = await axios.get(url);\r\n\r\n    if (response.data.includes(\"table.cfdump_wddx\")) {\r\n      data = [];\r\n    } else {\r\n      data = response.data;\r\n      if (Object.entries(data).length > 0) {\r\n      } else {\r\n        data = [];\r\n      }\r\n    }\r\n  } catch (error) {\r\n    data = [];\r\n  }\r\n  console.log(\"wooooo dataaaaa\");\r\n  return \"\";\r\n};\r\n"]},"metadata":{},"sourceType":"module"}